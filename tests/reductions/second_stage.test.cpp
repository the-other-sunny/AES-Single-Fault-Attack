#include "reductions.hpp"

#include <cassert>
#include <algorithm>
#include <iostream>
#include <iomanip>

using namespace std;

namespace second_stage {
namespace test {
    namespace single_case {
        void reduction(FlatState const& Y, FlatState const& Y_, size_t fault_position, array<vector<Row>, 4> const& stage1_results, FlatState const& K10)
        {
            auto keys = second_stage::reduction(Y, Y_, fault_position, stage1_results);
            auto it = find(keys.begin(), keys.end(), K10);
            assert (it != keys.end());
        }
    }

    void reduction() {
        array tests = {
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0xbc, 0x3e, 0x68, 0x8f, 0x08, 0xe3, 0xfc, 0x21, 0x69, 0xfd, 0x5b, 0xbe, 0x91, 0x4e, 0xd9, 0x32},
                {0x5e, 0x28, 0x21, 0x2d, 0xb6, 0x8c, 0xab, 0x31, 0x12, 0xf2, 0x1c, 0x8d, 0x47, 0x4f, 0xf0, 0xcf},
                {0xe9, 0x32, 0xe8, 0x9a, 0x18, 0xcc, 0xda, 0xaa, 0x6a, 0x14, 0x0b, 0x6c, 0xd3, 0x74, 0x3a, 0x5e},
                0,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0x77, 0x41, 0x2e, 0x88, 0x3d, 0xb6, 0x82, 0xd6, 0x1d, 0x6d, 0x8d, 0x2f, 0x37, 0x07, 0x79, 0x18},
                {0x87, 0x1f, 0xe2, 0x39, 0x4b, 0x13, 0xb7, 0xc2, 0x0b, 0x37, 0x07, 0xa5, 0x58, 0xe5, 0x05, 0x1f},
                {0x7c, 0xb4, 0x15, 0xa2, 0x09, 0x44, 0x0e, 0x66, 0xdf, 0x5c, 0xf2, 0x8b, 0xfb, 0x5b, 0x13, 0x35},
                1,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0x45, 0xb5, 0x7c, 0x09, 0xd7, 0xee, 0x65, 0x79, 0x4b, 0x42, 0xd5, 0x8f, 0x27, 0x96, 0xc3, 0x67},
                {0xca, 0x25, 0xa6, 0xe4, 0x3e, 0x1d, 0x51, 0x7d, 0x9c, 0xa4, 0xa1, 0x20, 0x02, 0xbe, 0xed, 0x65},
                {0x77, 0xe1, 0x20, 0x9e, 0x7b, 0x53, 0xae, 0x42, 0xfb, 0x60, 0x53, 0x21, 0x6e, 0x2c, 0x1e, 0xe0},
                2,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0x96, 0x5b, 0xde, 0x2d, 0x71, 0x0e, 0x4a, 0xf8, 0xd7, 0x76, 0x36, 0x05, 0x15, 0x2a, 0x20, 0x99},
                {0x98, 0x1b, 0x47, 0x36, 0xf3, 0x28, 0xda, 0xe2, 0xb6, 0x84, 0xdc, 0x2a, 0x38, 0xf3, 0x1f, 0x12},
                {0x27, 0xd3, 0x4d, 0x27, 0x19, 0x45, 0x86, 0xcd, 0x0e, 0xec, 0xc8, 0xe6, 0x54, 0xdf, 0x7d, 0x91},
                3,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {        
                {0x99, 0x08, 0x45, 0x0c, 0xaa, 0xb6, 0x47, 0x75, 0x64, 0x56, 0xcc, 0xd0, 0x86, 0x1a, 0x6f, 0x7b},
                {0xa9, 0x1a, 0x9d, 0x67, 0x45, 0xe3, 0x53, 0x93, 0x9d, 0x52, 0x79, 0x52, 0xc5, 0xe5, 0x0e, 0xb1},
                {0x71, 0x93, 0x78, 0x5c, 0x5f, 0x94, 0x4d, 0x83, 0x2a, 0x94, 0xbb, 0x41, 0x14, 0xf2, 0xcb, 0xe8},
                4,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0x35, 0x6e, 0x64, 0xfd, 0x0a, 0x66, 0x42, 0x10, 0xa6, 0xdd, 0x55, 0x21, 0xbb, 0xda, 0xae, 0xfd},
                {0x9a, 0x01, 0x1b, 0xff, 0x50, 0x3b, 0x8d, 0x33, 0xad, 0x1f, 0x2f, 0xbe, 0x87, 0x15, 0xd8, 0x2f},
                {0x41, 0x02, 0x25, 0xae, 0x64, 0x83, 0x1b, 0xf6, 0x31, 0x31, 0x81, 0x26, 0xa1, 0x9f, 0x2f, 0xdb},
                5,        
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0x98, 0xde, 0x47, 0x5e, 0x13, 0x90, 0x53, 0x2c, 0x2b, 0x40, 0x6d, 0x20, 0x14, 0x20, 0x4e, 0x4a},
                {0xd4, 0xb5, 0xcf, 0x71, 0x02, 0x97, 0x40, 0xde, 0xba, 0x62, 0xb8, 0xaa, 0x02, 0x0d, 0x0e, 0x14},
                {0x86, 0x72, 0x3b, 0x05, 0x87, 0x47, 0xb5, 0xb0, 0x93, 0xb1, 0xee, 0x7d, 0xcf, 0xee, 0x88, 0x1a},
                6,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {           
                {0xe3, 0x06, 0x03, 0xa6, 0x39, 0xfb, 0x19, 0x86, 0x35, 0x33, 0x6c, 0x83, 0xf5, 0x78, 0x7d, 0x8c},
                {0x74, 0xdb, 0xdc, 0xd9, 0xc8, 0xdc, 0xe5, 0xea, 0x52, 0x47, 0xb3, 0x5b, 0x35, 0xc8, 0x91, 0x16},
                {0xde, 0xab, 0x45, 0x35, 0x04, 0x0a, 0xb8, 0x95, 0x76, 0xca, 0xea, 0x03, 0xcb, 0x57, 0x5a, 0xf1},
                7,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0xe5, 0xc4, 0x6e, 0x1d, 0xfb, 0x26, 0x4c, 0x7f, 0x21, 0xfa, 0x3e, 0x87, 0x29, 0x3a, 0x0d, 0xed},
                {0x36, 0xa5, 0x51, 0xed, 0x94, 0x1f, 0x78, 0x91, 0x75, 0x91, 0xdc, 0x11, 0x87, 0x54, 0x79, 0xd3},
                {0x3d, 0x1b, 0x0a, 0x64, 0x08, 0x12, 0xa3, 0xb3, 0xbd, 0x0c, 0xa1, 0xdc, 0xdb, 0xaf, 0x7a, 0xbc},
                8,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0x71, 0x37, 0x53, 0x7f, 0x4c, 0x18, 0x21, 0x7c, 0x0b, 0x4c, 0x45, 0xbf, 0xe8, 0xa0, 0xe0, 0xc6},
                {0xe2, 0x79, 0x30, 0xde, 0xe4, 0xce, 0x9a, 0x1b, 0x39, 0x6c, 0xf0, 0x9d, 0x37, 0xad, 0x67, 0x5b},
                {0xd2, 0x54, 0xf9, 0x3f, 0x47, 0xd1, 0xaf, 0x2c, 0xe0, 0xc6, 0x14, 0xa3, 0x46, 0x23, 0x91, 0x41},
                9,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0x44, 0xea, 0x69, 0x6d, 0xd7, 0xbc, 0xf0, 0xbe, 0x66, 0x28, 0x5d, 0xfb, 0x8c, 0x08, 0xdc, 0x2f},
                {0xe8, 0x94, 0x0b, 0xba, 0x46, 0x18, 0x14, 0x47, 0x63, 0xaf, 0xf0, 0xb2, 0x57, 0x36, 0xc6, 0x71},
                {0xe1, 0x49, 0xc6, 0x53, 0x3d, 0xfb, 0x1e, 0xcc, 0x9e, 0x81, 0x6e, 0xb7, 0xfd, 0x4f, 0x70, 0xb1},
                10,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0x69, 0x51, 0x64, 0x80, 0xe3, 0xf2, 0xe5, 0x76, 0x02, 0xa2, 0x3a, 0xe6, 0x8f, 0xd9, 0x2f, 0xaf},
                {0x77, 0xee, 0x57, 0xa9, 0xba, 0x30, 0x9f, 0x1f, 0x5a, 0x1c, 0xe5, 0xa8, 0x5f, 0xba, 0x6c, 0x5b},
                {0x05, 0x74, 0xe8, 0xaa, 0xa5, 0x33, 0x76, 0xc8, 0x5a, 0xc1, 0x70, 0xc8, 0x05, 0xf7, 0x20, 0x6e},
                11,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0x69, 0xb5, 0x2f, 0xd0, 0x20, 0x5a, 0x18, 0xf2, 0x2a, 0x3d, 0xd0, 0x67, 0x4d, 0xc7, 0x9b, 0x77},
                {0xba, 0x01, 0xd9, 0x95, 0xd2, 0x3d, 0xb2, 0x4b, 0x10, 0xe7, 0x83, 0x62, 0xda, 0x1f, 0x01, 0xf5},
                {0xfd, 0x6b, 0xe5, 0x70, 0xe5, 0x14, 0xbd, 0xcd, 0x4d, 0xb9, 0x58, 0xac, 0x95, 0xd6, 0x6e, 0x93},
                12,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0xfe, 0x85, 0xfb, 0x65, 0x8a, 0x5c, 0x5d, 0xf8, 0x1f, 0x56, 0xf1, 0xc1, 0x18, 0x65, 0x77, 0xc4},
                {0xf5, 0x1e, 0xfd, 0xde, 0x86, 0xce, 0x0c, 0x69, 0x46, 0x1d, 0xb3, 0x88, 0x83, 0x51, 0xfd, 0xff},
                {0xeb, 0x31, 0xe1, 0x5f, 0xc3, 0xa7, 0x36, 0xe0, 0x34, 0xf8, 0x4a, 0xd9, 0xfa, 0x3e, 0x63, 0x78},
                13,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0x75, 0xaf, 0x6b, 0x76, 0x1f, 0xae, 0x52, 0xb6, 0x08, 0x81, 0xbb, 0x3f, 0x53, 0x8e, 0x2a, 0x13},
                {0xf0, 0x4d, 0x79, 0x02, 0xbf, 0xdf, 0x8a, 0x67, 0x01, 0x70, 0xb3, 0x1c, 0xbc, 0xc9, 0x5b, 0x29},
                {0x79, 0x02, 0x4e, 0x7d, 0xc8, 0xaf, 0x9b, 0xf8, 0x7c, 0xc0, 0x2e, 0x43, 0x8f, 0x72, 0xf3, 0xa1},
                14,
            },
            tuple<FlatState, FlatState, FlatState, size_t> {
                {0xd8, 0x45, 0x80, 0xe1, 0x3c, 0x63, 0xf3, 0x7d, 0x5f, 0x50, 0x19, 0xcd, 0x72, 0x4d, 0x6d, 0x58},
                {0xcf, 0xd8, 0x84, 0xf4, 0xd8, 0xd9, 0x04, 0xd6, 0x44, 0x24, 0xde, 0x2c, 0x3c, 0x3e, 0x90, 0x42},
                {0x94, 0x19, 0x4c, 0x23, 0x63, 0x65, 0xbe, 0x2d, 0xca, 0x95, 0x91, 0x3d, 0xeb, 0x4e, 0x56, 0x16},
                15,
            },
        };

        cout << "Testing `second_stage::reduction`..." << endl;
        unsigned int test_num = 0;
        for (auto [Y, Y_, K10, fault_position] : tests) {
            cout << "\tTest " << setw(2) << ++test_num << "... ";

            auto stage1_results = first_stage::reduction(Y, Y_, fault_position);
            single_case::reduction(Y, Y_, fault_position, stage1_results, K10);
            
            cout << "passed !" << endl;
        }
    }
}
}

int main() {
    second_stage::test::reduction();
    return 0;
}